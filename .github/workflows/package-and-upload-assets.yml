name: Package and Upload Release Assets

# Global variables
env:
  FILES_TO_PACKAGE: "gemini-extension.json GEMINI.md LICENSE mcp-server/ commands/"

on:
  release:
    types: [created]

  # This allows you to run the workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'The tag of the release to upload assets to'
        required: true
        type: string    

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. Checks out your repository's code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Sets up the Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Specify the Node.js version you use
          cache: 'npm'
          # Tell the cache where to find the package-lock.json
          cache-dependency-path: mcp-server/package-lock.json

      # 3. Install MCP server dependencies
      # The MCP server needs its dependencies bundled in the release
      - name: Install MCP server dependencies
        working-directory: ./mcp-server
        run: npm ci

      # 4. Runs your build script
      - name: Run build
        working-directory: ./mcp-server
        run: npm run build

      # 5. Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: .

  package-and-upload:
    # This job depends on the 'build' job finishing successfully
    needs: build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        platform:
          - { archive_name: "linux.x64.security.tar.gz", archive_command: 'tar -czvf "${ARCHIVE_NAME}" -C staging .', download_binary: "osv-scanner_linux_amd64" }
  
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: .

      - name: Download source binary
        env:
          SOURCE_BINARY: ${{ matrix.platform.download_binary }}
        run: |
          DOWNLOAD_URL="https://github.com/google/osv-scanner/releases/latest/download/${SOURCE_BINARY}"
          
          echo "Downloading binary from: ${DOWNLOAD_URL}"
          curl -L --fail -o "${SOURCE_BINARY}" "${DOWNLOAD_URL}"
          chmod +x ${SOURCE_BINARY}
          
          echo "Binary downloaded and prepared."
          ls -l

      - name: Create release archive
        id: create_archive
        env:
          ARCHIVE_COMMAND: ${{ matrix.platform.archive_command }}
          ARCHIVE_NAME: ${{ matrix.platform.archive_name }}
          SOURCE_BINARY: ${{ matrix.platform.download_binary }}
        run: |
          echo "Packaging ${SOURCE_BINARY} and extension contents into ${ARCHIVE_NAME}"

          mkdir staging
          cp "${SOURCE_BINARY}" "staging/osv-scanner"
          cp -r ${FILES_TO_PACKAGE} staging/

          echo "All assets staged."
          ls -l staging

          # Create archive
          eval "${ARCHIVE_COMMAND}"
          echo "Created archive: ${ARCHIVE_NAME}"
          echo "ARCHIVE_PATH=${ARCHIVE_NAME}" >> $GITHUB_OUTPUT

      - name: Upload archive as workflow artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: ${{ matrix.platform.archive_name }}
          path: ${{ steps.create_archive.outputs.ARCHIVE_PATH }}