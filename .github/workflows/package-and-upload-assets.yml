name: Package and Upload Release Assets

# Global variables
env:
  PACKAGE_NAME: "security"
  FILES_TO_PACKAGE: "gemini-extension.json BIGQUERY.md LICENSE tools.yaml"
  GCS_BUCKET_URL: "https://storage.googleapis.com/genai-toolbox/geminicli"

on:
  release:
    types: [created]

  # This allows you to run the workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'The tag of the release to upload assets to'
        required: true
        type: string    

permissions:
  # This permission is required for the action to create a GitHub Release
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. Checks out your repository's code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Sets up the Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Specify the Node.js version you use
          cache: 'npm'
          # Tell the cache where to find the package-lock.json
          cache-dependency-path: mcp-server/package-lock.json

      # 3. Install MCP server dependencies
      # The MCP server needs its dependencies bundled in the release
      - name: Install MCP server dependencies
        run: cd mcp-server && npm ci

      # 4. Runs your build script
      - name: Run build
        run: cd mcp-server && npm run build

      # 5. Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: .

  package-and-upload:
    # This job depends on the 'build' job finishing successfully
    needs: build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        platform:
          - { os: "linux", arch: "x64", download_path_segment: "linux_amd64", binary_suffix: "", archive_extension: "tar.gz", archive_command: 'tar -czvf "${ARCHIVE_NAME}" -C staging .' }
          - { os: "darwin", arch: "arm64", download_path_segment: "darwin_arm64", binary_suffix: "", archive_extension: "tar.gz", archive_command: 'tar -czvf "${ARCHIVE_NAME}" -C staging .' } 
          - { os: "darwin", arch: "x64", download_path_segment: "darwin_amd64", binary_suffix: "", archive_extension: "tar.gz", archive_command: 'tar -czvf "${ARCHIVE_NAME}" -C staging .' }
          - { os: "win32", arch: "x64", download_path_segment: "windows_amd64", binary_suffix: ".exe", archive_extension: "zip", archive_command: '(cd staging && zip ../"${ARCHIVE_NAME}" *)' }
  
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: .

      - name: Set Dynamic Environment Variables
        id: vars
        run: |
          echo "archive_name=${{ matrix.platform.os }}.${{ matrix.platform.arch }}.${{ env.PACKAGE_NAME }}.${{ matrix.platform.archive_extension }}" >> $GITHUB_OUTPUT
          echo "source_binary=osv_scanner_${{ matrix.platform.os }}_${{ matrix.platform.arch }}${{ matrix.platform.binary_suffix }}" >> $GITHUB_OUTPUT
      
      - name: Download Source Binary
        env:
          SOURCE_BINARY: ${{ steps.vars.outputs.source_binary }}
        run: |
          DOWNLOAD_URL="https://github.com/google/osv-scanner/releases/download/latest/${SOURCE_BINARY}"
          
          echo "Downloading binary from: ${DOWNLOAD_URL}"
          curl -L --fail -o "${SOURCE_BINARY}" "${DOWNLOAD_URL}"
          chmod +x ${SOURCE_BINARY}
          
          echo "Binary downloaded and prepared."
          ls -l
          